package com.honegroupp.familyRegister.model

import android.content.Intent
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.firebase.database.*
import com.honegroupp.familyRegister.backend.FirebaseDatabaseManager
import com.honegroupp.familyRegister.view.home.HomeActivity
import com.honegroupp.familyRegister.view.itemList.ItemListAdapter
import com.honegroupp.familyRegister.R

/**
 * This class is responsible for storing data and business logic for Family
 *
 * @param familyId is the id of the family, this is generated by FirebaseAuthetication.
 * @param familyOwnerUID is the UID of the owner of this family
 * @param members is an ArrayList of UIDs of the member of the familyK
 *
 * @author Tianyi Mo
 * */

data class Family(
    @set:PropertyName("familyName")
    @get:PropertyName("familyName")
    var familyName: String = "",
    @set:PropertyName("password")
    @get:PropertyName("password")
    var password: String = "",
    @set:PropertyName("familyOwnerUID")
    @get:PropertyName("familyOwnerUID")
    var familyOwnerUID: String = "",
    @set:PropertyName("familyId")
    @get:PropertyName("familyId")
    var familyId: String = "",
    @set:PropertyName("members")
    @get:PropertyName("members")
    var members: ArrayList<String> = ArrayList(),
    @set:PropertyName("categories")
    @get:PropertyName("categories")
    var categories: ArrayList<Category> = ArrayList()
) {
    /*This constructor has no parameter, which is used to create CategoryUpload while retrieve data from database*/
    constructor() : this("", "", "", "", ArrayList())

    /**
     * This method is responsible for storing Family to the database.
     *
     * */
    fun store(mActivity: AppCompatActivity, uid: String) {
        this.categories.add(Category("Letter"))
        this.categories.add(Category("Photo"))
        this.categories.add(Category("Instrument"))
        this.categories.add(Category("Others"))
        FirebaseDatabaseManager.uploadFamily(this,uid)
        val ownerPath = FirebaseDatabaseManager.USER_PATH + uid + "/"
        FirebaseDatabaseManager.retrieve(
            ownerPath
        ) { d: DataSnapshot -> callbackAddFamilyToUser(mActivity, uid, ownerPath, d) }
    }

    private fun callbackAddFamilyToUser(
        mActivity: AppCompatActivity,
        uid: String,
        ownerPath: String,
        dataSnapshot: DataSnapshot
    ) {
        val owner = dataSnapshot.child("").getValue(User::class.java) as User
        // set family id
        owner.familyId = this.familyId
        // set the user to be the family owner
        owner.isFamilyOwner = true

        // update user in the database
        FirebaseDatabaseManager.update(ownerPath, owner)

        // Go to Home page
        val intent = Intent(mActivity, HomeActivity::class.java)
        intent.putExtra("UserID", uid)
        mActivity.startActivity(intent)
    }

    companion object {
        /**
         * This methods is responsible for validating family id and its password.
         * TODO This method might not be in controller.
         * */
        fun validateJoinFamilyInput(
            mActivity: AppCompatActivity,
            familyIdInput: String,
            familyPasswordInput: String,
            uid: String
        ) {

            FirebaseDatabaseManager.retrieve(
                FirebaseDatabaseManager.FAMILY_PATH
            ) { d: DataSnapshot ->
                callbackJoinFamily(
                    mActivity,
                    uid,
                    familyIdInput,
                    familyPasswordInput,
                    mActivity,
                    d
                )
            }
        }

        /**
         * This family is responsible for joining the User to the family.
         * */
        private fun callbackJoinFamily(
            mActivity: AppCompatActivity,
            currUid: String,
            familyIdInput: String,
            familyPasswordInput: String,
            currActivity: AppCompatActivity,
            dataSnapshot: DataSnapshot
        ) {
            // Check whether family exist
            if (!dataSnapshot.hasChild(familyIdInput) || familyIdInput.trim() == "") {
                Toast.makeText(currActivity, "Family Id is not correct!", Toast.LENGTH_SHORT).show()
            } else {
                // Get family
                val family =
                    dataSnapshot.child(familyIdInput).getValue(Family::class.java) as Family
                // Check password
                if (family.password != familyPasswordInput) {
                    Toast.makeText(currActivity, "Password is not correct!", Toast.LENGTH_SHORT)
                        .show()
                } else {
                    // Add user to family and add family to user
                    if (!family.members.contains(currUid)) {
                        family.members.add(currUid)
                        family.store(mActivity, currUid)
                    }

                    Toast.makeText(currActivity, "Join family successful!", Toast.LENGTH_SHORT)
                        .show()
                }
            }
        }

        /**
         * This method is responsible for showing the items in the item list
         *
         * */
        fun showItems(uid: String, categoryName: String, mActivity: AppCompatActivity){
            val rootPath = "/"
            FirebaseDatabaseManager.retrieve(rootPath){ d-> callbackShowItems(uid, categoryName, mActivity, d) }
        }

        /**
         * This method is the callback for showItem
         *
         * */
        private fun callbackShowItems(uid: String, categoryName: String, mActivity: AppCompatActivity, dataSnapshot: DataSnapshot){
            //get Family ID


            // get items of that category
            val items = ArrayList<Item>()

            val recyclerView = mActivity.findViewById<RecyclerView>(R.id.recycler_view)

            // Setting the recycler view
            recyclerView.setHasFixedSize(true)
            recyclerView.layoutManager = LinearLayoutManager(mActivity)

            // setting one ItemListAdapter
            val itemListAdapter = ItemListAdapter(items, mActivity)
            recyclerView.adapter = itemListAdapter
//            itemListAdapter.listener = mA@ItemListActivity


//            dbListener = databaseReference.addValueEventListener(object : ValueEventListener {
//                override fun onCancelled(p0: DatabaseError) {
//                    toast(p0.message, Toast.LENGTH_SHORT)
//                    progress_circular.visibility = View.INVISIBLE
//                }
//
//                override fun onDataChange(p0: DataSnapshot) {
//                    // clear it before filling it
//                    itemUploads.clear()
//
//                    p0.children.forEach {
//                        // Retrieve data from database, create an Item object and store in the list of one ItemListAdapter
//                        val currUpload = it.getValue(Item::class.java) as Item
//                        currUpload.key = it.key
//                        itemUploads.add(currUpload)
//                    }
//
//                    // It would update recycler after loading image from firebase storage
//                    itemListAdapter.notifyDataSetChanged()
//                    progress_circular.visibility = View.INVISIBLE
//                }
//
//
//            })
        }

    }

}